{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geoquanta","text":"<p>A python package for geospatial analysis, offering a wide range of tools and functionalities for working with geographic data.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://chaitanyaj14.github.io/geoquanta</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate random numbers</li> <li>Analyze raster and vector data</li> </ul>"},{"location":"#demo","title":"Demo","text":"<ul> <li>Test line from PC</li> <li></li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geoquanta.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geoquanta/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#geoquanta.common.random_number","title":"<code>random_number()</code>","text":"<p>Returns a random number between 0 and 1.</p> <p>Returns:</p> Type Description <code>float</code> <p>A random number between 0 and 1.</p> Source code in <code>geoquanta/common.py</code> <pre><code>def random_number():\n    \"\"\"Returns a random number between 0 and 1.\n\n    Returns:\n        float: A random number between 0 and 1.\n    \"\"\"\n    import random\n    return random.random() \n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/chaitanyaj14/geoquanta/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>GeoQuanta could always use more documentation, whether as part of the official GeoQuanta docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/chaitanyaj14/geoquanta/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geoquanta for local development.</p> <ol> <li> <p>Fork the geoquanta repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geoquanta.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geoquanta\n$ cd geoquanta/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geoquanta tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/chaitanyaj14/geoquanta/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geoquanta/","title":"geoquanta module","text":"<p>Main module.</p>"},{"location":"geoquanta/#geoquanta.geoquanta.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class</p> required Source code in <code>geoquanta/geoquanta.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class\n    \"\"\"\n    def __init__(self, center=[22, 79], zoom=4, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [22, 79].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 4.\n        \"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.add_control(ipyleaflet.LayersControl(position='topright'))\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"Adds a tile layer to the map.\n\n        Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        **kwargs: Additional keyword arguments accepted by ipyleaflet.TileLayer.\n        \"\"\"\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n        name (str or ipyleaflet.basemaps.BaseMap): The name of the basemap as a string, or a pre-defined ipyleaflet basemap.\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"\n        Adds a GeoJSON layer to the map.\n\n        Args:\n        data (dict or str): The GeoJSON data as a dictionary, URL, or file path.\n        name (str): The name of the GeoJSON layer (default is \"geojson\").\n        **kwargs: Additional keyword arguments accepted by ipyleaflet.GeoJSON.\n        \"\"\"\n        import json\n        import requests\n\n        if isinstance(data, dict):\n            data = data\n        elif data.startswith(\"http\"):\n            data = requests.get(data).json()\n        elif data.lower().endswith((\".json\", \".geojson\")):\n            with open(data) as fp:\n                data = json.load(fp)\n        else:\n            data = data\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", 'fillOpacity': 0.2, 'weight': 1}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {'color': 'white', 'fillOpacity': 0.6}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shapefile(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile as a GeoJSON layer to the map.\n\n        Args:\n        data (str): The path to the shapefile.\n        name (str): The name of the GeoJSON layer (default is \"shp\").\n        **kwargs: Additional keyword arguments accepted by add_geojson.\n        \"\"\"\n\n        import shapefile\n\n        if isinstance (data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", 'fillOpacity': 0.2, 'weight': 1}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {'color': 'white', 'fillOpacity': 0.6}\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds, name='image', **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n        - url (str): The URL of the image.\n        - bounds (tuple): A tuple of the form (south, west, north, east) representing the bounds of the image overlay.\n        - name (str, optional): The name of the image overlay. Default is 'image'.\n        - **kwargs: Additional keyword arguments accepted by ipyleaflet.ImageOverlay.\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_raster (self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"\n        Add a raster layer to the map.\n\n        Args:\n            data: The raster data to be added to the map.\n            name (str): The name of the raster layer (default is \"raster\").\n            zoom_to_layer (bool): Whether to zoom to the added layer (default is True).\n            **kwargs: Additional keyword arguments to be passed.\n\n        Raises:\n            ImportError: If the localtileserver package is not installed.\n        \"\"\"\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_opacity_slider(self, layer_index=-1, description=\"Opacity\", position=\"topright\"):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        try:\n            import ipywidgets as widgets\n        except ImportError:\n            raise ImportError(\"Please install ipywidgets to use this function.\")\n\n\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n    def add_marker(self, location, draggable, marker_text=None):\n        from ipyleaflet import Marker\n        from ipywidgets import HTML\n        \"\"\"Adds a marker to the map.\n\n        Args:\n            location (tuple): A tuple containing the latitude and longitude of the marker (e.g., (lat, lon)).\n            draggable (bool): Whether the marker should be draggable.\n            marker_text (str, optional): Text to display in the marker's popup. Defaults to None.\n        \"\"\"\n        marker = Marker(location=location, draggable=draggable)\n        if marker_text:\n            message = HTML()\n            message.description = marker_text\n            marker.popup = message\n        self.add_layer(marker)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n        try:\n            import ipywidgets as widgets\n        except ImportError:\n            raise ImportError(\"Please install ipywidgets to use this function.\")\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n\n    def add_beans(self, name=\"beans\"):\n        beans = ipyleaflet.MarkerCluster(name=name)\n        self.add(beans)\n\n        for i in range(10):\n            marker = ipyleaflet.Marker(location=(i*10, i*10))\n            beans.markers = beans.markers + (marker,)\n\n    def add_latlon_widget(self, position=\"bottomleft\"):\n        import ipywidgets as widgets\n        from ipyleaflet import WidgetControl\n\n        self.default_style = {\"cursor\": \"crosshair\"}\n\n        output = widgets.Output()\n        control = WidgetControl(widget=output, position=position)\n        self.add(control)\n\n        # latlon = widgets.Label(value=\"\")\n        # latlon_control = WidgetControl(widget=latlon, position=position)\n        # self.add(latlon_control)\n\n        with output:\n            print(\"Click on the map\")\n\n        def update_latlon(**kwargs):\n            with output:\n                if kwargs.get(\"type\") == \"click\":\n                    latlon = kwargs.get(\"coordinates\")\n                    output.clear_output()\n                    print(f\"Latitude: {latlon[0]:.2f}, Longitude: {latlon[1]:.2f}\")\n            # latlon.value = (\n            #     f\"Latitude: {event['new'][0]:.2f}, Longitude: {event['new'][1]:.2f}\"\n            # )\n\n        self.on_interaction(update_latlon)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.__init__","title":"<code>__init__(self, center=[22, 79], zoom=4, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [22, 79].</p> <code>[22, 79]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 4.</p> <code>4</code> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def __init__(self, center=[22, 79], zoom=4, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [22, 79].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 4.\n    \"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.add_control(ipyleaflet.LayersControl(position='topright'))\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the map.</p> <p>name (str or ipyleaflet.basemaps.BaseMap): The name of the basemap as a string, or a pre-defined ipyleaflet basemap.</p> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n    name (str or ipyleaflet.basemaps.BaseMap): The name of the basemap as a string, or a pre-defined ipyleaflet basemap.\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n    try:\n        import ipywidgets as widgets\n    except ImportError:\n        raise ImportError(\"Please install ipywidgets to use this function.\")\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>data (dict or str): The GeoJSON data as a dictionary, URL, or file path. name (str): The name of the GeoJSON layer (default is \"geojson\"). **kwargs: Additional keyword arguments accepted by ipyleaflet.GeoJSON.</p> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"\n    Adds a GeoJSON layer to the map.\n\n    Args:\n    data (dict or str): The GeoJSON data as a dictionary, URL, or file path.\n    name (str): The name of the GeoJSON layer (default is \"geojson\").\n    **kwargs: Additional keyword arguments accepted by ipyleaflet.GeoJSON.\n    \"\"\"\n    import json\n    import requests\n\n    if isinstance(data, dict):\n        data = data\n    elif data.startswith(\"http\"):\n        data = requests.get(data).json()\n    elif data.lower().endswith((\".json\", \".geojson\")):\n        with open(data) as fp:\n            data = json.load(fp)\n    else:\n        data = data\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", 'fillOpacity': 0.2, 'weight': 1}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {'color': 'white', 'fillOpacity': 0.6}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <ul> <li>url (str): The URL of the image.</li> <li>bounds (tuple): A tuple of the form (south, west, north, east) representing the bounds of the image overlay.</li> <li>name (str, optional): The name of the image overlay. Default is 'image'.</li> <li>**kwargs: Additional keyword arguments accepted by ipyleaflet.ImageOverlay.</li> </ul> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_image(self, url, bounds, name='image', **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n    - url (str): The URL of the image.\n    - bounds (tuple): A tuple of the form (south, west, north, east) representing the bounds of the image overlay.\n    - name (str, optional): The name of the image overlay. Default is 'image'.\n    - **kwargs: Additional keyword arguments accepted by ipyleaflet.ImageOverlay.\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_opacity_slider(self, layer_index=-1, description=\"Opacity\", position=\"topright\"):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    try:\n        import ipywidgets as widgets\n    except ImportError:\n        raise ImportError(\"Please install ipywidgets to use this function.\")\n\n\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>The raster data to be added to the map.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer (default is \"raster\").</p> <code>'raster'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the added layer (default is True).</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ImportError</code> <p>If the localtileserver package is not installed.</p> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_raster (self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"\n    Add a raster layer to the map.\n\n    Args:\n        data: The raster data to be added to the map.\n        name (str): The name of the raster layer (default is \"raster\").\n        zoom_to_layer (bool): Whether to zoom to the added layer (default is True).\n        **kwargs: Additional keyword arguments to be passed.\n\n    Raises:\n        ImportError: If the localtileserver package is not installed.\n    \"\"\"\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_shapefile","title":"<code>add_shapefile(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile as a GeoJSON layer to the map.</p> <p>data (str): The path to the shapefile. name (str): The name of the GeoJSON layer (default is \"shp\"). **kwargs: Additional keyword arguments accepted by add_geojson.</p> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_shapefile(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile as a GeoJSON layer to the map.\n\n    Args:\n    data (str): The path to the shapefile.\n    name (str): The name of the GeoJSON layer (default is \"shp\").\n    **kwargs: Additional keyword arguments accepted by add_geojson.\n    \"\"\"\n\n    import shapefile\n\n    if isinstance (data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", 'fillOpacity': 0.2, 'weight': 1}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {'color': 'white', 'fillOpacity': 0.6}\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"geoquanta/#geoquanta.geoquanta.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>url (str): The URL of the tile layer. name (str): The name of the tile layer. **kwargs: Additional keyword arguments accepted by ipyleaflet.TileLayer.</p> Source code in <code>geoquanta/geoquanta.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"Adds a tile layer to the map.\n\n    Args:\n    url (str): The URL of the tile layer.\n    name (str): The name of the tile layer.\n    **kwargs: Additional keyword arguments accepted by ipyleaflet.TileLayer.\n    \"\"\"\n    layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install GeoQuanta, run this command in your terminal:</p> <pre><code>pip install geoquanta\n</code></pre> <p>This is the preferred method to install GeoQuanta, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install GeoQuanta from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/chaitanyaj14/geoquanta\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use GeoQuanta in a project:</p> <pre><code>import geoquanta\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that contains the utility functions for the geoquanta package.</p>"},{"location":"utils/#geoquanta.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Reads a CSV file and returns a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>A DataFrame containing the CSV data.</p> Source code in <code>geoquanta/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"\n    Reads a CSV file and returns a pandas DataFrame.\n\n    Args:\n      csv_file (str): The path to the CSV file.\n\n    Returns:\n      pandas.DataFrame: A DataFrame containing the CSV data.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/Add_Basemaps_and_Tile_Layers/","title":"Add Basemaps and Tile Layers","text":"In\u00a0[1]: Copied! <pre># !pip install geoquanta\n# !pip install git+https://github.com/chaitanyaj14/geoquanta.git\n</pre> # !pip install geoquanta # !pip install git+https://github.com/chaitanyaj14/geoquanta.git In\u00a0[2]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[3]: Copied! <pre>geoquanta.Map()\n</pre> geoquanta.Map() Out[3]: In\u00a0[4]: Copied! <pre>m = geoquanta.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m = geoquanta.Map() m.add_basemap(\"OpenTopoMap\") m Out[4]: In\u00a0[5]: Copied! <pre>m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\")\nm\n</pre> m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\") m Out[5]: In\u00a0[6]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url=url, name='Google Satellite', attribution='Google')\nm\n</pre> url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url=url, name='Google Satellite', attribution='Google') m Out[6]:"},{"location":"examples/Add_Basemaps_and_Tile_Layers/#add-basemaps-and-tile-layer-using-geoquanta","title":"Add Basemaps and Tile Layer using Geoquanta\u00b6","text":""},{"location":"examples/Add_Basemaps_and_Tile_Layers/#import-geoquanta","title":"Import Geoquanta\u00b6","text":""},{"location":"examples/Add_Basemaps_and_Tile_Layers/#create-a-map","title":"Create a Map\u00b6","text":""},{"location":"examples/Add_Basemaps_and_Tile_Layers/#add-basemap","title":"Add Basemap\u00b6","text":""},{"location":"examples/Add_Basemaps_and_Tile_Layers/#add-a-tile-layer","title":"Add a tile layer\u00b6","text":""},{"location":"examples/Geoquanta/","title":"Geoquanta","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/Geoquanta/#geoquanta","title":"Geoquanta\u00b6","text":""},{"location":"examples/Map_Interactions/","title":"Map Interactions","text":"In\u00a0[1]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[2]: Copied! <pre>m = geoquanta.Map()\nm.add_latlon_widget()\nm\n</pre> m = geoquanta.Map() m.add_latlon_widget() m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Map_Interactions/#map-interactions","title":"Map Interactions\u00b6","text":""},{"location":"examples/Markers/","title":"Markers","text":"In\u00a0[1]: Copied! <pre># !pip install geoquanta\n</pre> # !pip install geoquanta In\u00a0[2]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[3]: Copied! <pre># Generate a map\nmap = geoquanta.Map()\n\n# Add a marker at a specific location\nmarker_location = [22, 79]\nmarker_text = \"Hello!\"\nmap.add_marker(location=marker_location, draggable=True, marker_text=marker_text)\n\nmap\n</pre> # Generate a map map = geoquanta.Map()  # Add a marker at a specific location marker_location = [22, 79] marker_text = \"Hello!\" map.add_marker(location=marker_location, draggable=True, marker_text=marker_text)  map Out[3]:"},{"location":"examples/Markers/#markers","title":"Markers\u00b6","text":""},{"location":"examples/Raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre># !pip install geoquanta\n# !pip install git+https://github.com/chaitanyaj14/geoquanta.git\n</pre> # !pip install geoquanta # !pip install git+https://github.com/chaitanyaj14/geoquanta.git In\u00a0[2]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[3]: Copied! <pre>m = geoquanta.Map(center=[25, -110])\n\nurl = \"https://i.imgur.com/06Q1fSz.png\"\nbounds = ((13, -130), (32, -100))\n\nm.add_image(url, bounds)\nm\n</pre> m = geoquanta.Map(center=[25, -110])  url = \"https://i.imgur.com/06Q1fSz.png\" bounds = ((13, -130), (32, -100))  m.add_image(url, bounds) m Out[3]: In\u00a0[4]: Copied! <pre>m = geoquanta.Map()\ndata = 'landsat.tif'\nm.add_raster(data, name='landsat_img')\nm\n</pre> m = geoquanta.Map() data = 'landsat.tif' m.add_raster(data, name='landsat_img') m Out[4]:"},{"location":"examples/Raster/#add-raster-data","title":"Add Raster Data\u00b6","text":""},{"location":"examples/Raster/#adding-image-or-gifs","title":"Adding Image or GIFs\u00b6","text":""},{"location":"examples/Raster/#add-raster","title":"Add Raster\u00b6","text":""},{"location":"examples/Toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import geoquanta\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import geoquanta import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[3]: In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n\n\ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]   toolbar_button.observe(toolbar_click, \"value\") In\u00a0[5]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n\n\nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()   close_button.observe(close_click, \"value\") toolbar Out[5]: In\u00a0[6]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(\n    rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"62px\")\n)\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(     rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"62px\") ) In\u00a0[7]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(\n            description=\"\",\n            button_style=\"primary\",\n            icon=icons[i * rows + j],\n            layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n        )\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(             description=\"\",             button_style=\"primary\",             icon=icons[i * rows + j],             layout=widgets.Layout(width=\"28px\", padding=\"0px\"),         ) grid Out[7]: In\u00a0[8]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[9]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n\n\ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]   toolbar_button.observe(toolbar_click, \"value\") toolbar Out[9]: In\u00a0[10]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[11]: Copied! <pre>m = geoquanta.Map()\nm.add(toolbar_ctrl)\noutput = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add(output_ctrl)\nm\n</pre> m = geoquanta.Map() m.add(toolbar_ctrl) output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add(output_ctrl) m Out[11]: In\u00a0[12]: Copied! <pre>def tool_click(b):\n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):     with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[13]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Toolbar/#toolbar","title":"Toolbar\u00b6","text":""},{"location":"examples/Vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre># !pip install geoquanta\n# !pip install git+https://github.com/chaitanyaj14/geoquanta.git\n</pre> # !pip install geoquanta # !pip install git+https://github.com/chaitanyaj14/geoquanta.git In\u00a0[2]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[3]: Copied! <pre># Using a GeoJSON hosted on GitHub\n\nm = geoquanta.Map()\nm.add_geojson(\"https://raw.githubusercontent.com/chaitanyaj14/geoquanta/main/docs/examples/countries/countries.geojson\", name=\"Countries\")\nm\n</pre> # Using a GeoJSON hosted on GitHub  m = geoquanta.Map() m.add_geojson(\"https://raw.githubusercontent.com/chaitanyaj14/geoquanta/main/docs/examples/countries/countries.geojson\", name=\"Countries\") m Out[3]: <pre>Map(center=[22, 79], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_tex\u2026</pre> In\u00a0[4]: Copied! <pre># Needs the file to hosted locally\n\nm = geoquanta.Map()\nm.add_geojson(\"countries\\countries.geojson\", name=\"Countries\")\nm\n</pre> # Needs the file to hosted locally  m = geoquanta.Map() m.add_geojson(\"countries\\countries.geojson\", name=\"Countries\") m Out[4]: <pre>Map(center=[22, 79], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_tex\u2026</pre> In\u00a0[5]: Copied! <pre># Needs the file to hosted locally\n\nm = geoquanta.Map()\nm.add_shapefile(\"countries\\countries.shp\", name=\"Countries\")\nm\n</pre> # Needs the file to hosted locally  m = geoquanta.Map() m.add_shapefile(\"countries\\countries.shp\", name=\"Countries\") m Out[5]: <pre>Map(center=[22, 79], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_tex\u2026</pre> In\u00a0[6]: Copied! <pre>m = geoquanta.Map()\n\nstyle={\n    'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n}\n\nhover_style={\n    'color': 'orange', 'dashArray': '0', 'fillOpacity': 0.5\n}\n\nm.add_geojson(\"countries\\countries.geojson\", name=\"Countries\", style=style, hover_style=hover_style)\nm\n</pre> m = geoquanta.Map()  style={     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1 }  hover_style={     'color': 'orange', 'dashArray': '0', 'fillOpacity': 0.5 }  m.add_geojson(\"countries\\countries.geojson\", name=\"Countries\", style=style, hover_style=hover_style) m Out[6]: <pre>Map(center=[22, 79], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_tex\u2026</pre>"},{"location":"examples/Vector/#working-with-vector-data","title":"Working with Vector data\u00b6","text":""},{"location":"examples/Vector/#adding-a-geojson","title":"Adding a GeoJSON\u00b6","text":""},{"location":"examples/Vector/#adding-a-shapefile","title":"Adding a Shapefile\u00b6","text":""},{"location":"examples/Vector/#styling","title":"Styling\u00b6","text":""},{"location":"examples/Widgets/","title":"Widgets","text":"In\u00a0[1]: Copied! <pre># !pip install geoquanta\n</pre> # !pip install geoquanta In\u00a0[2]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[3]: Copied! <pre>m = geoquanta.Map()\nm.add_opacity_slider()\nm\n</pre> m = geoquanta.Map() m.add_opacity_slider() m Out[3]: In\u00a0[4]: Copied! <pre>m = geoquanta.Map()\nm.add_basemap_gui()\nm\n</pre> m = geoquanta.Map() m.add_basemap_gui() m Out[4]: In\u00a0[5]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[6]: Copied! <pre>m = geoquanta.Map()\nm\n</pre> m = geoquanta.Map() m Out[6]: In\u00a0[7]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[8]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get(\"coordinates\")\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get(\"type\") == \"click\":\n        with output_widget:\n            output_widget.clear_output()\n            print(\"Coordinates: {}\".format(latlon))\n\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get(\"coordinates\")     # latlon = [round(x, 2) for x in latlon]     if kwargs.get(\"type\") == \"click\":         with output_widget:             output_widget.clear_output()             print(\"Coordinates: {}\".format(latlon))   m.on_interaction(handle_interaction) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Widgets/#widgets","title":"Widgets\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/</p>"},{"location":"examples/Widgets/#adding-a-slider","title":"Adding a slider\u00b6","text":""},{"location":"examples/Widgets/#adding-a-basemap-dropdown-selector","title":"Adding a basemap dropdown selector\u00b6","text":""},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import geoquanta\n</pre> import geoquanta In\u00a0[2]: Copied! <pre>from geoquanta import utils\n</pre> from geoquanta import utils In\u00a0[3]: Copied! <pre>csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\"\ndf = utils.csv_to_df(csv)\nprint(df.head())\n</pre> csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\" df = utils.csv_to_df(csv) print(df.head()) <pre>   id        name\n0  AL     Alabama\n1  AK      Alaska\n2  AZ     Arizona\n3  AR    Arkansas\n4  CA  California\n</pre>"},{"location":"examples/csv/#convert-csv-to-pandas-dataframe","title":"Convert CSV to Pandas DataFrame\u00b6","text":""},{"location":"examples/random/","title":"Random","text":"In\u00a0[1]: Copied! <pre>from geoquanta.common import random_number\n</pre> from geoquanta.common import random_number In\u00a0[2]: Copied! <pre>random_number()\n</pre> random_number() Out[2]: <pre>0.9751273457250501</pre>"},{"location":"python/00_getting_started/","title":"00 getting started","text":""},{"location":"python/00_getting_started/#introduction-to-python-programming-language","title":"Introduction to Python Programming Language\u00b6","text":"<p>Python is a high-level, versatile programming language known for its simplicity and readability. Created in the late 1980s, Python has gained immense popularity among developers for its ease of use and the wide range of applications it supports.</p>"},{"location":"python/00_getting_started/#key-features","title":"Key Features:\u00b6","text":"<ul> <li><p>Simplicity: Python's syntax is designed to be readable and straightforward, making it accessible to beginners and experienced programmers alike.</p> </li> <li><p>Versatility: Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming, making it suitable for a wide range of applications.</p> </li> <li><p>Dynamic Typing: Python uses dynamic typing, allowing variables to be assigned without specifying their type, making code more flexible and concise.</p> </li> <li><p>Automatic Memory Management: Python automatically handles memory allocation and deallocation, reducing the burden on developers.</p> </li> <li><p>Extensive Standard Library: Python comes with a large standard library that provides ready-to-use modules and packages for various tasks, such as web development, data manipulation, and more.</p> </li> <li><p>Active Community: Python has a large and active community of developers who contribute to its growth and provide support through forums, tutorials, and libraries.</p> </li> </ul>"},{"location":"python/00_getting_started/#applications","title":"Applications:\u00b6","text":"<p>Python is used in various fields, including:</p> <ul> <li><p>Web Development: Popular web frameworks like Django and Flask are built using Python, making it a preferred choice for web development.</p> </li> <li><p>Scientific Computing: Python is widely used in scientific computing and data analysis due to libraries like NumPy, SciPy, and Pandas.</p> </li> <li><p>Automation: Python's simplicity and versatility make it ideal for automating repetitive tasks, such as scripting and batch processing.</p> </li> <li><p>Machine Learning and AI: Python's libraries, such as TensorFlow, PyTorch, and scikit-learn, are widely used in machine learning and artificial intelligence applications.</p> </li> </ul> <p>Whether you're a beginner or an experienced programmer, Python's user-friendly syntax and powerful features make it an excellent choice for developing a wide range of applications.</p>"},{"location":"python/00_getting_started/#more-about-python","title":"More About Python\u00b6","text":""},{"location":"python/00_getting_started/#pythons-syntax-and-readability","title":"Python's Syntax and Readability\u00b6","text":"<p>Python's syntax is designed to be clean and readable, with a focus on simplicity and readability. This makes it easy to write and understand code, reducing the time and effort required for development and maintenance.</p>"},{"location":"python/00_getting_started/#dynamic-typing-and-expressiveness","title":"Dynamic Typing and Expressiveness\u00b6","text":"<p>Python is dynamically typed, meaning that variables do not need to be declared with a specific type. This allows for more expressive and concise code, as developers can focus on solving problems rather than managing types.</p>"},{"location":"python/00_getting_started/#extensive-standard-library-and-third-party-packages","title":"Extensive Standard Library and Third-Party Packages\u00b6","text":"<p>Python comes with a large standard library that provides modules and packages for common tasks such as file I/O, networking, and data manipulation. Additionally, Python has a vibrant ecosystem of third-party packages available through the Python Package Index (PyPI), which further extends its functionality for various use cases.</p>"},{"location":"python/00_getting_started/#cross-platform-compatibility","title":"Cross-Platform Compatibility\u00b6","text":"<p>Python is a cross-platform language, meaning that code written in Python can run on various operating systems without modification. This makes it easy to develop and deploy applications across different platforms.</p>"},{"location":"python/00_getting_started/#community-and-support","title":"Community and Support\u00b6","text":"<p>Python has a large and active community of developers who contribute to the language's growth and provide support through forums, tutorials, and online communities. This vibrant community ensures that Python remains up-to-date and well-supported.</p>"},{"location":"python/00_getting_started/#popular-use-cases","title":"Popular Use Cases\u00b6","text":"<p>Python is used in a wide range of applications, including web development, data analysis, scientific computing, artificial intelligence, and machine learning. Its versatility and ease of use make it a popular choice for developers in various fields.</p>"},{"location":"python/00_getting_started/#conclusion","title":"Conclusion\u00b6","text":"<p>Python's simplicity, readability, and versatility make it an excellent choice for beginners and experienced developers alike. Whether you're building web applications, analyzing data, or developing machine learning models, Python's rich ecosystem and community support make it a powerful tool for solving complex problems.</p>"},{"location":"python/01_introduction_to_python/","title":"01 introduction to python","text":"In\u00a0[1]: Copied! <pre># This is a comment\nprint(\"Hello, World!\")  # This is also a comment\n</pre> # This is a comment print(\"Hello, World!\")  # This is also a comment <pre>Hello, World!\n</pre> In\u00a0[2]: Copied! <pre># Variable assignment\nx = 10\ny = 3.14\nname = \"Alice\"\nmy_list = [1, 2, 3, 4, 5]\nmy_dict = {\"name\": \"Bob\", \"age\": 30}\n</pre> # Variable assignment x = 10 y = 3.14 name = \"Alice\" my_list = [1, 2, 3, 4, 5] my_dict = {\"name\": \"Bob\", \"age\": 30} In\u00a0[3]: Copied! <pre># If statement\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelif x &lt; 5:\n    print(\"x is less than 5\")\nelse:\n    print(\"x is equal to 5\")\n\n# For loop\nfor i in range(5):\n    print(i)\n\n# While loop\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</pre> # If statement if x &gt; 5:     print(\"x is greater than 5\") elif x &lt; 5:     print(\"x is less than 5\") else:     print(\"x is equal to 5\")  # For loop for i in range(5):     print(i)  # While loop i = 0 while i &lt; 5:     print(i)     i += 1 <pre>x is greater than 5\n0\n1\n2\n3\n4\n0\n1\n2\n3\n4\n</pre> In\u00a0[4]: Copied! <pre># Function definition\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n\n# Function call\ngreet(\"Alice\")\n</pre> # Function definition def greet(name):     print(\"Hello, \" + name + \"!\")  # Function call greet(\"Alice\") <pre>Hello, Alice!\n</pre> <p>Python is a versatile and easy-to-learn programming language that is widely used in various fields, including web development, data science, artificial intelligence, and more. In this notebook, we have covered the basics of Python programming, including variables, data types, control structures, and functions. These are just the foundation of what Python has to offer.</p> <p>In our journey of learning Python, we will delve into these topics and many others in more detail. We will explore advanced concepts, libraries, and best practices to help you become a proficient Python programmer. So, stay tuned and let's explore the world of Python programming together!</p>"},{"location":"python/01_introduction_to_python/#introduction-to-python-programming","title":"Introduction to Python Programming\u00b6","text":"<p>Python is a powerful and versatile programming language that is used in a wide variety of applications. It is known for its simplicity and readability, making it an excellent choice for beginners and experienced programmers alike. In this notebook, we will cover the basics of Python programming, including data types, control structures, functions, and more.</p>"},{"location":"python/01_introduction_to_python/#getting-started","title":"Getting Started\u00b6","text":"<p>To start using Python, you need to have it installed on your computer. You can download Python from the official website (https://www.python.org/downloads/) and follow the installation instructions for your operating system.</p> <p>Once Python is installed, you can start writing Python code in a text editor or an Integrated Development Environment (IDE) such as PyCharm, Visual Studio Code, or Jupyter Notebook.</p>"},{"location":"python/01_introduction_to_python/#python-syntax","title":"Python Syntax\u00b6","text":"<p>Python syntax is designed to be simple and readable. Here are some basic syntax rules:</p> <ul> <li>Python statements do not require a semicolon <code>;</code> at the end.</li> <li>Indentation is used to define code blocks (e.g., for loops, if statements).</li> <li>Comments start with the <code>#</code> symbol and are ignored by the interpreter.</li> </ul>"},{"location":"python/01_introduction_to_python/#variables-and-data-types","title":"Variables and Data Types\u00b6","text":"<p>Variables are used to store data values in Python. Python has several built-in data types, including integers, floats, strings, lists, tuples, dictionaries, and more.</p>"},{"location":"python/01_introduction_to_python/#control-structures","title":"Control Structures\u00b6","text":"<p>Python supports various control structures, including if statements, for loops, while loops, and more.</p>"},{"location":"python/01_introduction_to_python/#functions","title":"Functions\u00b6","text":"<p>Functions are reusable blocks of code that perform a specific task. You can define your own functions in Python using the def keyword.</p>"},{"location":"python/02_variables/","title":"02 variables","text":"In\u00a0[1]: Copied! <pre># Variable assignment\nx = 5\ny = \"Hello, World!\"\nprint(x)\nprint(y)\n</pre> # Variable assignment x = 5 y = \"Hello, World!\" print(x) print(y) <pre>5\nHello, World!\n</pre> In\u00a0[2]: Copied! <pre># Variable naming examples\nmy_var = 10\nmyVar = \"Python\"\nMYVAR = 3.14\n</pre> # Variable naming examples my_var = 10 myVar = \"Python\" MYVAR = 3.14 In\u00a0[3]: Copied! <pre># Variable reassignment\nx = 10\nprint(x)\nx = \"Python\"\nprint(x)\n</pre> # Variable reassignment x = 10 print(x) x = \"Python\" print(x) <pre>10\nPython\n</pre> In\u00a0[4]: Copied! <pre># Multiple assignment\na, b, c = 1, 2, 3\nprint(a, b, c)\n</pre> # Multiple assignment a, b, c = 1, 2, 3 print(a, b, c) <pre>1 2 3\n</pre> In\u00a0[5]: Copied! <pre># Swapping variables\na, b = 10, 20\nprint(\"Before swap:\", a, b)\na, b = b, a\nprint(\"After swap:\", a, b)\n</pre> # Swapping variables a, b = 10, 20 print(\"Before swap:\", a, b) a, b = b, a print(\"After swap:\", a, b) <pre>Before swap: 10 20\nAfter swap: 20 10\n</pre> In\u00a0[6]: Copied! <pre># Constants\nPI = 3.14159\nGRAVITY = 9.8\n</pre> # Constants PI = 3.14159 GRAVITY = 9.8 <p>Variables are essential for storing and managing data in Python. Understanding how to create, name, and use variables is fundamental to writing Python code effectively.</p>"},{"location":"python/02_variables/#variables-in-python","title":"Variables in Python\u00b6","text":"<p>Variables are used to store data values in Python. Unlike other programming languages, Python has dynamic typing, which means you do not need to declare the type of a variable when you create one. The type of a variable is determined by the value it is assigned. Let's explore how to create and use variables in Python.</p>"},{"location":"python/02_variables/#variable-assignment","title":"Variable Assignment\u00b6","text":"<p>In Python, you can create a variable and assign a value to it using the assignment operator <code>=</code>.</p>"},{"location":"python/02_variables/#variable-naming-rules","title":"Variable Naming Rules\u00b6","text":"<ul> <li>Variable names must start with a letter (a-z, A-Z) or an underscore (_).</li> <li>The rest of the variable name may consist of letters, numbers, and underscores.</li> <li>Variable names are case-sensitive (myVar, myvar, and MYVAR are different variables).</li> </ul>"},{"location":"python/02_variables/#variable-reassignment","title":"Variable Reassignment\u00b6","text":"<p>You can change the value of a variable by assigning a new value to it.</p>"},{"location":"python/02_variables/#multiple-assignment","title":"Multiple Assignment\u00b6","text":"<p>You can assign values to multiple variables in a single line.</p>"},{"location":"python/02_variables/#swapping-variables","title":"Swapping Variables\u00b6","text":"<p>You can swap the values of two variables using a temporary variable or by using tuple unpacking.</p>"},{"location":"python/02_variables/#constants","title":"Constants\u00b6","text":"<p>Python does not have built-in constant types, but you can use variable names in uppercase to indicate that the value should not be changed.</p>"},{"location":"python/03_data_types/","title":"03 data types","text":"In\u00a0[1]: Copied! <pre># Examples of numeric types\ninteger_num = 10\nfloat_num = 3.14\ncomplex_num = 2 + 3j\n\nprint(integer_num, float_num, complex_num)\n</pre> # Examples of numeric types integer_num = 10 float_num = 3.14 complex_num = 2 + 3j  print(integer_num, float_num, complex_num) <pre>10 3.14 (2+3j)\n</pre> In\u00a0[2]: Copied! <pre># Examples of sequence types\nmy_list = [1, 2, 3, 4, 5]\nmy_tuple = (1, 2, 3, 4, 5)\nmy_string = \"Hello, World!\"\n\nprint(my_list, my_tuple, my_string)\n</pre> # Examples of sequence types my_list = [1, 2, 3, 4, 5] my_tuple = (1, 2, 3, 4, 5) my_string = \"Hello, World!\"  print(my_list, my_tuple, my_string) <pre>[1, 2, 3, 4, 5] (1, 2, 3, 4, 5) Hello, World!\n</pre> In\u00a0[3]: Copied! <pre># Example of a mapping type\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\n\nprint(my_dict)\n</pre> # Example of a mapping type my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}  print(my_dict) <pre>{'name': 'John', 'age': 30, 'city': 'New York'}\n</pre> In\u00a0[4]: Copied! <pre># Example of a set type\nmy_set = {1, 2, 3, 4, 5}\n\nprint(my_set)\n</pre> # Example of a set type my_set = {1, 2, 3, 4, 5}  print(my_set) <pre>{1, 2, 3, 4, 5}\n</pre> In\u00a0[5]: Copied! <pre># Example of a boolean type\nis_valid = True\n\nprint(is_valid)\n</pre> # Example of a boolean type is_valid = True  print(is_valid) <pre>True\n</pre> In\u00a0[6]: Copied! <pre># Example of the None type\nmy_var = None\n\nprint(my_var)\n</pre> # Example of the None type my_var = None  print(my_var) <pre>None\n</pre>"},{"location":"python/03_data_types/#python-data-types","title":"Python Data Types\u00b6","text":"<p>Python is a dynamically typed language, which means you don't have to explicitly declare variables before using them. The Python interpreter infers the type based on the value assigned to the variable. Python supports several built-in data types, which can be classified into the following categories:</p> <ol> <li>Numeric Types</li> <li>Sequence Types</li> <li>Mapping Types</li> <li>Set Types</li> <li>Boolean Type</li> <li>None Type</li> </ol>"},{"location":"python/03_data_types/#1-numeric-types","title":"1. Numeric Types\u00b6","text":"<p>Python supports various numeric types, including integers, floating-point numbers, and complex numbers. Numeric types can be used for arithmetic operations.</p>"},{"location":"python/03_data_types/#2-sequence-types","title":"2. Sequence Types\u00b6","text":"<p>Python has several built-in sequence types, including lists, tuples, and strings. Sequence types can store multiple items in an ordered collection.</p>"},{"location":"python/03_data_types/#3-mapping-types","title":"3. Mapping Types\u00b6","text":"<p>Python's mapping type is the dictionary, which stores key-value pairs. Dictionaries are unordered collections of items.</p>"},{"location":"python/03_data_types/#4-set-types","title":"4. Set Types\u00b6","text":"<p>Python includes set types, which are unordered collections of unique items. Sets are useful for operations like union, intersection, and difference.</p>"},{"location":"python/03_data_types/#5-boolean-type","title":"5. Boolean Type\u00b6","text":"<p>Python has a boolean type, which can have two values: True and False. Booleans are often used for logical operations.</p>"},{"location":"python/03_data_types/#6-none-type","title":"6. None Type\u00b6","text":"<p>Python has a special type called None, which represents the absence of a value. It is often used to signify that a variable has not been assigned a value yet.</p>"},{"location":"python/04_operators/","title":"04 operators","text":"<p>Operators are special symbols in Python that are used to perform operations on variables and values. Python supports various types of operators, including arithmetic operators, comparison operators, logical operators, and more. Let's explore these operators in detail.</p> In\u00a0[1]: Copied! <pre># Arithmetic operators\nx = 10\ny = 3\nprint(\"Addition:\", x + y)\nprint(\"Subtraction:\", x - y)\nprint(\"Multiplication:\", x * y)\nprint(\"Division:\", x / y)\nprint(\"Floor Division:\", x // y)\nprint(\"Modulus:\", x % y)\nprint(\"Exponentiation:\", x ** y)\n</pre> # Arithmetic operators x = 10 y = 3 print(\"Addition:\", x + y) print(\"Subtraction:\", x - y) print(\"Multiplication:\", x * y) print(\"Division:\", x / y) print(\"Floor Division:\", x // y) print(\"Modulus:\", x % y) print(\"Exponentiation:\", x ** y) <pre>Addition: 13\nSubtraction: 7\nMultiplication: 30\nDivision: 3.3333333333333335\nFloor Division: 3\nModulus: 1\nExponentiation: 1000\n</pre> In\u00a0[2]: Copied! <pre># Comparison operators\nx = 10\ny = 5\nprint(\"Equal to:\", x == y)\nprint(\"Not equal to:\", x != y)\nprint(\"Greater than:\", x &gt; y)\nprint(\"Less than:\", x &lt; y)\nprint(\"Greater than or equal to:\", x &gt;= y)\nprint(\"Less than or equal to:\", x &lt;= y)\n</pre> # Comparison operators x = 10 y = 5 print(\"Equal to:\", x == y) print(\"Not equal to:\", x != y) print(\"Greater than:\", x &gt; y) print(\"Less than:\", x &lt; y) print(\"Greater than or equal to:\", x &gt;= y) print(\"Less than or equal to:\", x &lt;= y) <pre>Equal to: False\nNot equal to: True\nGreater than: True\nLess than: False\nGreater than or equal to: True\nLess than or equal to: False\n</pre> In\u00a0[3]: Copied! <pre># Logical operators\nx = True\ny = False\nprint(\"AND:\", x and y)\nprint(\"OR:\", x or y)\nprint(\"NOT:\", not x)\n</pre> # Logical operators x = True y = False print(\"AND:\", x and y) print(\"OR:\", x or y) print(\"NOT:\", not x) <pre>AND: False\nOR: True\nNOT: False\n</pre> In\u00a0[4]: Copied! <pre># Assignment operators\nx = 10\nx += 5  # Equivalent to x = x + 5\nprint(\"x:\", x)\n</pre> # Assignment operators x = 10 x += 5  # Equivalent to x = x + 5 print(\"x:\", x) <pre>x: 15\n</pre> In\u00a0[5]: Copied! <pre># Identity operators\nx = [\"apple\", \"banana\"]\ny = [\"apple\", \"banana\"]\nprint(\"Is x the same object as y?\", x is y)\nprint(\"Is x not the same object as y?\", x is not y)\n</pre> # Identity operators x = [\"apple\", \"banana\"] y = [\"apple\", \"banana\"] print(\"Is x the same object as y?\", x is y) print(\"Is x not the same object as y?\", x is not y) <pre>Is x the same object as y? False\nIs x not the same object as y? True\n</pre> In\u00a0[6]: Copied! <pre># Membership operators\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"Is 'banana' in fruits?\", \"banana\" in fruits)\nprint(\"Is 'orange' not in fruits?\", \"orange\" not in fruits)\n</pre> # Membership operators fruits = [\"apple\", \"banana\", \"cherry\"] print(\"Is 'banana' in fruits?\", \"banana\" in fruits) print(\"Is 'orange' not in fruits?\", \"orange\" not in fruits) <pre>Is 'banana' in fruits? True\nIs 'orange' not in fruits? True\n</pre> In\u00a0[7]: Copied! <pre># Bitwise operators\nx = 10  # Binary: 1010\ny = 4   # Binary: 0100\nprint(\"Bitwise AND:\", x &amp; y)   # 0000\nprint(\"Bitwise OR:\", x | y)    # 1110\nprint(\"Bitwise XOR:\", x ^ y)   # 1110\nprint(\"Bitwise NOT for x:\", ~x) # -11\nprint(\"Bitwise Left Shift for x:\", x &lt;&lt; 1)  # 10100\nprint(\"Bitwise Right Shift for x:\", x &gt;&gt; 1) # 0101\n</pre> # Bitwise operators x = 10  # Binary: 1010 y = 4   # Binary: 0100 print(\"Bitwise AND:\", x &amp; y)   # 0000 print(\"Bitwise OR:\", x | y)    # 1110 print(\"Bitwise XOR:\", x ^ y)   # 1110 print(\"Bitwise NOT for x:\", ~x) # -11 print(\"Bitwise Left Shift for x:\", x &lt;&lt; 1)  # 10100 print(\"Bitwise Right Shift for x:\", x &gt;&gt; 1) # 0101 <pre>Bitwise AND: 0\nBitwise OR: 14\nBitwise XOR: 14\nBitwise NOT for x: -11\nBitwise Left Shift for x: 20\nBitwise Right Shift for x: 5\n</pre> <p>These are some of the most commonly used operators in Python. Understanding how they work is essential for writing efficient and effective Python code.</p>"},{"location":"python/04_operators/#operators","title":"Operators\u00b6","text":""},{"location":"python/04_operators/#arithmetic-operators","title":"Arithmetic Operators\u00b6","text":"<p>Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, division, etc.</p>"},{"location":"python/04_operators/#comparison-operators","title":"Comparison Operators\u00b6","text":"<p>Comparison operators are used to compare two values and return a boolean result (True or False).</p>"},{"location":"python/04_operators/#logical-operators","title":"Logical Operators\u00b6","text":"<p>Logical operators are used to combine conditional statements and return a boolean result.</p>"},{"location":"python/04_operators/#assignment-operators","title":"Assignment Operators\u00b6","text":"<p>Assignment operators are used to assign values to variables.</p>"},{"location":"python/04_operators/#identity-operators","title":"Identity Operators\u00b6","text":"<p>Identity operators are used to compare the memory locations of two objects.</p>"},{"location":"python/04_operators/#membership-operators","title":"Membership Operators\u00b6","text":"<p>Membership operators are used to test if a sequence is present in an object.</p>"},{"location":"python/04_operators/#bitwise-operators","title":"Bitwise Operators\u00b6","text":"<p>Bitwise operators are used to perform bitwise operations on integers.</p>"},{"location":"python/05_input_output/","title":"05 input output","text":"In\u00a0[1]: Copied! <pre># Example of using the print() function\nprint(\"Hello, World!\")\nx = 10\nprint(\"The value of x is:\", x)\nprint(\"The sum of 1 and 2 is:\", 1 + 2)\n</pre> # Example of using the print() function print(\"Hello, World!\") x = 10 print(\"The value of x is:\", x) print(\"The sum of 1 and 2 is:\", 1 + 2) <pre>Hello, World!\nThe value of x is: 10\nThe sum of 1 and 2 is: 3\n</pre> <pre># Example of using the input() function\nname = input(\"Enter your name: \")\nprint(\"Hello,\", name)\n</pre> <pre># Example of type conversion\nage = input(\"Enter your age: \")\nage = int(age)  # Convert age to an integer\nprint(\"You will be\", age + 10, \"years old in 10 years\")\n</pre> <pre># Example of formatting output\npi = 3.14159\nprint(\"The value of pi is:\", format(pi, \".2f\"))\n</pre> <pre># Example of reading from a file\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(\"File content:\", content)\nfile.close()\n\n# Example of writing to a file\nfile = open(\"example.txt\", \"w\")\nfile.write(\"This is an example text.\")\nfile.close()\n</pre> <p>Basic input/output operations are fundamental in Python programming. They allow you to interact with users, process data, and work with files. Understanding how to use the <code>input()</code> and <code>print()</code> functions, along with file I/O operations, is essential for building Python applications.</p>"},{"location":"python/05_input_output/#basic-inputoutput","title":"Basic Input/Output\u00b6","text":"<p>Input/output (I/O) operations are essential for interacting with the user and reading/writing data to files in Python. In this notebook, we will cover how to perform basic input/output operations using the <code>input()</code> and <code>print()</code> functions.</p>"},{"location":"python/05_input_output/#output-with-the-print-function","title":"Output with the <code>print()</code> Function\u00b6","text":"<p>The <code>print()</code> function is used to display output in Python. You can print text, variables, and expressions.</p>"},{"location":"python/05_input_output/#input-with-the-input-function","title":"Input with the <code>input()</code> Function\u00b6","text":"<p>The <code>input()</code> function is used to get user input in Python. It waits for the user to enter a value and then returns that value as a string.</p>"},{"location":"python/05_input_output/#type-conversion","title":"Type Conversion\u00b6","text":"<p>When using the <code>input()</code> function, the input is always returned as a string. If you need to convert the input to a different data type, you can use type conversion.</p>"},{"location":"python/05_input_output/#formatting-output","title":"Formatting Output\u00b6","text":"<p>You can format the output using the <code>print()</code> function's formatting options. For example, you can specify the number of decimal places for floating-point numbers.</p>"},{"location":"python/05_input_output/#readingwriting-files","title":"Reading/Writing Files\u00b6","text":"<p>Python also provides functions for reading from and writing to files. You can use the <code>open()</code> function to open a file and then use methods like <code>read()</code>, <code>write()</code>, and <code>close()</code> to perform file operations.</p>"},{"location":"python/06_conditional_statements/","title":"06 conditional statements","text":"<p>Conditional statements are used to perform different actions based on different conditions. In Python, we have the <code>if</code>, <code>elif</code> (else if), and <code>else</code> statements to handle these conditions. Let's explore how to use these statements in Python.</p> In\u00a0[1]: Copied! <pre># Example of an if statement\nx = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\n</pre> # Example of an if statement x = 10 if x &gt; 5:     print(\"x is greater than 5\") <pre>x is greater than 5\n</pre> In\u00a0[2]: Copied! <pre># Example of an if-else statement\nx = 3\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\n</pre> # Example of an if-else statement x = 3 if x &gt; 5:     print(\"x is greater than 5\") else:     print(\"x is less than or equal to 5\") <pre>x is less than or equal to 5\n</pre> In\u00a0[3]: Copied! <pre># Example of an if-elif-else statement\nx = 0\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse:\n    print(\"x is zero\")\n</pre> # Example of an if-elif-else statement x = 0 if x &gt; 0:     print(\"x is positive\") elif x &lt; 0:     print(\"x is negative\") else:     print(\"x is zero\") <pre>x is zero\n</pre> In\u00a0[4]: Copied! <pre># Example of nested if statements\nx = 10\nif x &gt; 5:\n    if x &lt; 15:\n        print(\"x is between 5 and 15\")\n</pre> # Example of nested if statements x = 10 if x &gt; 5:     if x &lt; 15:         print(\"x is between 5 and 15\") <pre>x is between 5 and 15\n</pre> <p>Conditional statements are essential for controlling the flow of your Python programs. They allow you to execute different blocks of code based on different conditions, making your programs more flexible and powerful.</p>"},{"location":"python/06_conditional_statements/#conditional-statements","title":"Conditional Statements\u00b6","text":""},{"location":"python/06_conditional_statements/#the-if-statement","title":"The <code>if</code> Statement\u00b6","text":"<p>The <code>if</code> statement checks a condition and executes a block of code if the condition is true.</p>"},{"location":"python/06_conditional_statements/#the-if-else-statement","title":"The <code>if-else</code> Statement\u00b6","text":"<p>The <code>if-else</code> statement checks a condition and executes one block of code if the condition is true and another block of code if the condition is false.</p>"},{"location":"python/06_conditional_statements/#the-elif-statement","title":"The <code>elif</code> Statement\u00b6","text":"<p>The <code>elif</code> statement allows you to check multiple conditions. It is short for \"else if\".</p>"},{"location":"python/06_conditional_statements/#nested-if-statements","title":"Nested <code>if</code> Statements\u00b6","text":"<p>You can also nest <code>if</code> statements inside other if statements to handle more complex conditions.</p>"},{"location":"python/07_loops/","title":"07 loops","text":"In\u00a0[1]: Copied! <pre># Example of a for loop\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</pre> # Example of a for loop fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits:     print(fruit) <pre>apple\nbanana\ncherry\n</pre> <p>You can also use the <code>range()</code> function to generate a sequence of numbers and iterate over it:</p> In\u00a0[2]: Copied! <pre># Example of using range() with for loop\nfor i in range(5):\n    print(i)\n</pre> # Example of using range() with for loop for i in range(5):     print(i) <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[3]: Copied! <pre># Example of a while loop\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</pre> # Example of a while loop i = 0 while i &lt; 5:     print(i)     i += 1 <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[4]: Copied! <pre># Example of loop control statements\nfor i in range(10):\n    if i == 3:\n        continue\n    if i == 7:\n        break\n    print(i)\n</pre> # Example of loop control statements for i in range(10):     if i == 3:         continue     if i == 7:         break     print(i) <pre>0\n1\n2\n4\n5\n6\n</pre> In\u00a0[5]: Copied! <pre># Example of nested loops\nfor i in range(3):\n    for j in range(2):\n        print(\"i =\", i, \" j =\", j)\n</pre> # Example of nested loops for i in range(3):     for j in range(2):         print(\"i =\", i, \" j =\", j) <pre>i = 0  j = 0\ni = 0  j = 1\ni = 1  j = 0\ni = 1  j = 1\ni = 2  j = 0\ni = 2  j = 1\n</pre> <p>Loops are essential for iterating over sequences and executing code repeatedly in Python.</p>"},{"location":"python/07_loops/#loops","title":"Loops\u00b6","text":"<p>Loops are used to iterate over a sequence of elements or execute a block of code repeatedly. Python supports two types of loops: <code>for</code> loops and <code>while</code> loops. Let's explore how to use these loops in Python.</p>"},{"location":"python/07_loops/#for-loop","title":"<code>for</code> Loop\u00b6","text":"<p>The <code>for</code> loop is used to iterate over a sequence (such as a list, tuple, or string) and execute a block of code for each element in the sequence.</p>"},{"location":"python/07_loops/#while-loop","title":"<code>while</code> Loop\u00b6","text":"<p>The <code>while</code> loop is used to execute a block of code as long as a specified condition is true.</p>"},{"location":"python/07_loops/#loop-control-statements","title":"Loop Control Statements\u00b6","text":"<p>Python provides loop control statements to change the execution of loops. These include <code>break</code>, <code>continue</code>, and <code>pass</code>.</p> <p><code>break</code>: Terminates the loop and transfers control to the next statement after the loop. <code>continue</code>: Skips the rest of the code inside the loop for the current iteration and goes to the next iteration. <code>pass</code>: Does nothing and acts as a placeholder.</p>"},{"location":"python/07_loops/#nested-loops","title":"Nested Loops\u00b6","text":"<p>You can nest one or more loops inside another loop to create nested loops.</p>"},{"location":"python/08_functions/","title":"08 functions","text":"In\u00a0[1]: Copied! <pre># Example of defining a function\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n</pre> # Example of defining a function def greet(name):     print(\"Hello, \" + name + \"!\") In\u00a0[2]: Copied! <pre># Example of calling a function\ngreet(\"Alice\")\n</pre> # Example of calling a function greet(\"Alice\") <pre>Hello, Alice!\n</pre> In\u00a0[3]: Copied! <pre># Example of a function with a return statement\ndef add(a, b):\n    return a + b\n\nresult = add(3, 5)\nprint(\"Result:\", result)\n</pre> # Example of a function with a return statement def add(a, b):     return a + b  result = add(3, 5) print(\"Result:\", result) <pre>Result: 8\n</pre> In\u00a0[4]: Copied! <pre># Example of default arguments\ndef greet(name=\"World\"):\n    print(\"Hello, \" + name + \"!\")\n\ngreet()\ngreet(\"Alice\")\n</pre> # Example of default arguments def greet(name=\"World\"):     print(\"Hello, \" + name + \"!\")  greet() greet(\"Alice\") <pre>Hello, World!\nHello, Alice!\n</pre> In\u00a0[5]: Copied! <pre># Example of variable number of arguments\ndef add(*args):\n    total = 0\n    for num in args:\n        total += num\n    return total\n\nresult = add(1, 2, 3, 4, 5)\nprint(\"Result:\", result)\n</pre> # Example of variable number of arguments def add(*args):     total = 0     for num in args:         total += num     return total  result = add(1, 2, 3, 4, 5) print(\"Result:\", result) <pre>Result: 15\n</pre> In\u00a0[6]: Copied! <pre># Example of a lambda function\nsquare = lambda x: x ** 2\nprint(\"Square of 5:\", square(5))\n</pre> # Example of a lambda function square = lambda x: x ** 2 print(\"Square of 5:\", square(5)) <pre>Square of 5: 25\n</pre> <p>Functions are a fundamental concept in Python programming. They allow you to write modular and reusable code, making your programs more readable and maintainable.</p>"},{"location":"python/08_functions/#functions","title":"Functions\u00b6","text":"<p>Functions are reusable blocks of code that perform a specific task. They allow you to break your code into smaller, more manageable pieces and avoid repetition. In this notebook, we will explore how to define and use functions in Python.</p>"},{"location":"python/08_functions/#defining-a-function","title":"Defining a Function\u00b6","text":"<p>You can define a function in Python using the <code>def</code> keyword, followed by the function name and parentheses. You can also specify parameters inside the parentheses.</p>"},{"location":"python/08_functions/#calling-a-function","title":"Calling a Function\u00b6","text":"<p>To call a function, simply write the function name followed by parentheses and any arguments that the function requires.</p>"},{"location":"python/08_functions/#return-statement","title":"Return Statement\u00b6","text":"<p>Functions can return a value using the <code>return</code> statement. This allows the function to pass data back to the caller.</p>"},{"location":"python/08_functions/#default-arguments","title":"Default Arguments\u00b6","text":"<p>You can specify default values for function parameters. If the caller does not provide a value for the parameter, the default value will be used.</p>"},{"location":"python/08_functions/#variable-number-of-arguments","title":"Variable Number of Arguments\u00b6","text":"<p>You can use <code>*args</code> and <code>**kwargs</code> to pass a variable number of arguments to a function.</p>"},{"location":"python/08_functions/#lambda-functions","title":"Lambda Functions\u00b6","text":"<p>Lambda functions are small, anonymous functions defined using the <code>lambda</code> keyword. They can have any number of arguments but can only have one expression.</p>"},{"location":"python/09_data_structures/","title":"09 data structures","text":"In\u00a0[1]: Copied! <pre># Introduction to Lists and Common Operations\n\n## Creating Lists\n# Lists can contain elements of different data types\nmy_list = [1, 2, 3, 4, 5]\nmixed_list = [1, \"Hello\", 3.14, True]\n\n## Accessing Elements\n# Elements can be accessed using indexing\nprint(\"First element:\", my_list[0])\nprint(\"Last element:\", my_list[-1])\n\n## Slicing\n# Slicing allows you to create a new list from a subset of elements\nprint(\"Slice:\", my_list[1:3])  # elements at index 1 and 2\n\n## Modifying Elements\n# Lists are mutable, meaning you can change their elements\nmy_list[0] = 10\nprint(\"Modified list:\", my_list)\n\n## Adding Elements\n# Append: adds an element to the end of the list\nmy_list.append(6)\nprint(\"After appending:\", my_list)\n\n# Insert: adds an element at a specific index\nmy_list.insert(2, 20)\nprint(\"After inserting:\", my_list)\n\n## Removing Elements\n# Remove: removes the first occurrence of a value\nmy_list.remove(3)\nprint(\"After removing:\", my_list)\n\n# Pop: removes and returns the element at the given index\npopped_element = my_list.pop(1)\nprint(\"Popped element:\", popped_element)\nprint(\"After popping:\", my_list)\n\n## Common Operations\n# Length of a list\nprint(\"Length of list:\", len(my_list))\n\n# Concatenation: combining two lists\nnew_list = my_list + [7, 8, 9]\nprint(\"Concatenated list:\", new_list)\n\n# Repetition: repeating a list\nrepeated_list = my_list * 2\nprint(\"Repeated list:\", repeated_list)\n\n# Membership: checking if an element is in the list\nprint(\"Is 10 in the list?\", 10 in my_list)\n\n# Iterating over elements\nprint(\"Elements of the list:\")\nfor item in my_list:\n    print(item)\n\n# Sorting\nmy_list.sort()\nprint(\"Sorted list:\", my_list)\n\n# Reversing\nmy_list.reverse()\nprint(\"Reversed list:\", my_list)\n</pre> # Introduction to Lists and Common Operations  ## Creating Lists # Lists can contain elements of different data types my_list = [1, 2, 3, 4, 5] mixed_list = [1, \"Hello\", 3.14, True]  ## Accessing Elements # Elements can be accessed using indexing print(\"First element:\", my_list[0]) print(\"Last element:\", my_list[-1])  ## Slicing # Slicing allows you to create a new list from a subset of elements print(\"Slice:\", my_list[1:3])  # elements at index 1 and 2  ## Modifying Elements # Lists are mutable, meaning you can change their elements my_list[0] = 10 print(\"Modified list:\", my_list)  ## Adding Elements # Append: adds an element to the end of the list my_list.append(6) print(\"After appending:\", my_list)  # Insert: adds an element at a specific index my_list.insert(2, 20) print(\"After inserting:\", my_list)  ## Removing Elements # Remove: removes the first occurrence of a value my_list.remove(3) print(\"After removing:\", my_list)  # Pop: removes and returns the element at the given index popped_element = my_list.pop(1) print(\"Popped element:\", popped_element) print(\"After popping:\", my_list)  ## Common Operations # Length of a list print(\"Length of list:\", len(my_list))  # Concatenation: combining two lists new_list = my_list + [7, 8, 9] print(\"Concatenated list:\", new_list)  # Repetition: repeating a list repeated_list = my_list * 2 print(\"Repeated list:\", repeated_list)  # Membership: checking if an element is in the list print(\"Is 10 in the list?\", 10 in my_list)  # Iterating over elements print(\"Elements of the list:\") for item in my_list:     print(item)  # Sorting my_list.sort() print(\"Sorted list:\", my_list)  # Reversing my_list.reverse() print(\"Reversed list:\", my_list) <pre>First element: 1\nLast element: 5\nSlice: [2, 3]\nModified list: [10, 2, 3, 4, 5]\nAfter appending: [10, 2, 3, 4, 5, 6]\nAfter inserting: [10, 2, 20, 3, 4, 5, 6]\nAfter removing: [10, 2, 20, 4, 5, 6]\nPopped element: 2\nAfter popping: [10, 20, 4, 5, 6]\nLength of list: 5\nConcatenated list: [10, 20, 4, 5, 6, 7, 8, 9]\nRepeated list: [10, 20, 4, 5, 6, 10, 20, 4, 5, 6]\nIs 10 in the list? True\nElements of the list:\n10\n20\n4\n5\n6\nSorted list: [4, 5, 6, 10, 20]\nReversed list: [20, 10, 6, 5, 4]\n</pre> In\u00a0[2]: Copied! <pre># Creating a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(\"Original tuple:\", my_tuple)\n\n# Accessing elements\nprint(\"First element:\", my_tuple[0])\nprint(\"Last element:\", my_tuple[-1])\nprint(\"Slicing elements:\", my_tuple[1:4])\n\n# Tuples are immutable, so you cannot modify elements\n# Uncommenting the following line will raise an error\n# my_tuple[0] = 10\n\n# Common operations\nprint(\"Length of tuple:\", len(my_tuple))\nprint(\"Minimum value:\", min(my_tuple))\nprint(\"Maximum value:\", max(my_tuple))\nprint(\"Sum of elements:\", sum(my_tuple))\nprint(\"Index of value 4:\", my_tuple.index(4))\nprint(\"Count of value 3:\", my_tuple.count(3))\n</pre> # Creating a tuple my_tuple = (1, 2, 3, 4, 5) print(\"Original tuple:\", my_tuple)  # Accessing elements print(\"First element:\", my_tuple[0]) print(\"Last element:\", my_tuple[-1]) print(\"Slicing elements:\", my_tuple[1:4])  # Tuples are immutable, so you cannot modify elements # Uncommenting the following line will raise an error # my_tuple[0] = 10  # Common operations print(\"Length of tuple:\", len(my_tuple)) print(\"Minimum value:\", min(my_tuple)) print(\"Maximum value:\", max(my_tuple)) print(\"Sum of elements:\", sum(my_tuple)) print(\"Index of value 4:\", my_tuple.index(4)) print(\"Count of value 3:\", my_tuple.count(3)) <pre>Original tuple: (1, 2, 3, 4, 5)\nFirst element: 1\nLast element: 5\nSlicing elements: (2, 3, 4)\nLength of tuple: 5\nMinimum value: 1\nMaximum value: 5\nSum of elements: 15\nIndex of value 4: 3\nCount of value 3: 1\n</pre> In\u00a0[3]: Copied! <pre># Creating a dictionary\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(\"Original dictionary:\", my_dict)\n\n# Accessing elements\nprint(\"Value for key 'name':\", my_dict['name'])\nprint(\"Keys:\", my_dict.keys())\nprint(\"Values:\", my_dict.values())\nprint(\"Items:\", my_dict.items())\n\n# Modifying elements\nmy_dict['age'] = 35\nprint(\"Modified dictionary:\", my_dict)\n\n# Adding elements\nmy_dict['gender'] = 'Male'\nprint(\"After adding:\", my_dict)\n\n# Removing elements\ndel my_dict['city']\nprint(\"After deleting:\", my_dict)\n\n# Common operations\nprint(\"Length of dictionary:\", len(my_dict))\nprint(\"Value for key 'name' using get():\", my_dict.get('name'))\nprint(\"Checking if key 'city' exists:\", 'city' in my_dict)\nprint(\"Clearing dictionary:\")\nmy_dict.clear()\nprint(\"Cleared dictionary:\", my_dict)\n</pre> # Creating a dictionary my_dict = {'name': 'John', 'age': 30, 'city': 'New York'} print(\"Original dictionary:\", my_dict)  # Accessing elements print(\"Value for key 'name':\", my_dict['name']) print(\"Keys:\", my_dict.keys()) print(\"Values:\", my_dict.values()) print(\"Items:\", my_dict.items())  # Modifying elements my_dict['age'] = 35 print(\"Modified dictionary:\", my_dict)  # Adding elements my_dict['gender'] = 'Male' print(\"After adding:\", my_dict)  # Removing elements del my_dict['city'] print(\"After deleting:\", my_dict)  # Common operations print(\"Length of dictionary:\", len(my_dict)) print(\"Value for key 'name' using get():\", my_dict.get('name')) print(\"Checking if key 'city' exists:\", 'city' in my_dict) print(\"Clearing dictionary:\") my_dict.clear() print(\"Cleared dictionary:\", my_dict) <pre>Original dictionary: {'name': 'John', 'age': 30, 'city': 'New York'}\nValue for key 'name': John\nKeys: dict_keys(['name', 'age', 'city'])\nValues: dict_values(['John', 30, 'New York'])\nItems: dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\nModified dictionary: {'name': 'John', 'age': 35, 'city': 'New York'}\nAfter adding: {'name': 'John', 'age': 35, 'city': 'New York', 'gender': 'Male'}\nAfter deleting: {'name': 'John', 'age': 35, 'gender': 'Male'}\nLength of dictionary: 3\nValue for key 'name' using get(): John\nChecking if key 'city' exists: False\nClearing dictionary:\nCleared dictionary: {}\n</pre> In\u00a0[4]: Copied! <pre># Looping through a list\nmy_list = [1, 2, 3, 4, 5]\nprint(\"Looping through a list:\")\nfor item in my_list:\n    print(item)\n</pre> # Looping through a list my_list = [1, 2, 3, 4, 5] print(\"Looping through a list:\") for item in my_list:     print(item) <pre>Looping through a list:\n1\n2\n3\n4\n5\n</pre> In\u00a0[5]: Copied! <pre># Looping through a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(\"\\nLooping through a tuple:\")\nfor item in my_tuple:\n    print(item)\n</pre> # Looping through a tuple my_tuple = (1, 2, 3, 4, 5) print(\"\\nLooping through a tuple:\") for item in my_tuple:     print(item) <pre>\nLooping through a tuple:\n1\n2\n3\n4\n5\n</pre> In\u00a0[6]: Copied! <pre># Looping through a dictionary\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(\"\\nLooping through a dictionary:\")\nfor key, value in my_dict.items():\n    print(key, \":\", value)\n</pre> # Looping through a dictionary my_dict = {'name': 'John', 'age': 30, 'city': 'New York'} print(\"\\nLooping through a dictionary:\") for key, value in my_dict.items():     print(key, \":\", value) <pre>\nLooping through a dictionary:\nname : John\nage : 30\ncity : New York\n</pre>"},{"location":"python/09_data_structures/#introduction-to-data-structures-in-python","title":"Introduction to Data Structures in Python\u00b6","text":"<p>Data structures are fundamental concepts in programming that allow you to organize and manipulate data efficiently. Python provides several built-in data structures, such as lists, tuples, dictionaries, and sets, each with its unique characteristics and use cases.</p> <p>In this tutorial, we will explore these data structures and learn how to use them effectively in Python. We will cover how to create, access, modify, and manipulate data stored in these structures. Understanding data structures is essential for writing efficient and maintainable code, as they play a crucial role in storing and organizing data in a program.</p>"},{"location":"python/09_data_structures/#lists","title":"Lists\u00b6","text":"<p>Lists are one of the most versatile and commonly used data structures in Python. They allow you to store a collection of items, which can be of different data types, and manipulate them in various ways. Lists are mutable, meaning you can change their elements after they are created, making them powerful tools for managing and organizing data.</p> <p>In this tutorial, we will explore the basics of lists in Python, including how to create lists, access and modify elements, add and remove items, and perform common operations on lists.</p>"},{"location":"python/09_data_structures/#tuples","title":"Tuples\u00b6","text":"<p>Tuples are another fundamental data structure in Python, similar to lists but with a key difference: they are immutable. This means that once a tuple is created, its elements cannot be changed, added, or removed. Tuples are commonly used to store collections of items that should not be modified, such as coordinates, database records, or function arguments.</p> <p>In this tutorial, we will explore how to create tuples, access elements, and perform common operations on tuples</p>"},{"location":"python/09_data_structures/#dictionaries","title":"Dictionaries\u00b6","text":"<p>Dictionaries are a versatile and powerful data structure in Python used to store key-value pairs. Unlike sequences such as lists and tuples, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be of any immutable type, such as strings or numbers. This allows for fast and efficient retrieval of values based on their keys.</p> <p>In this tutorial, we will explore how to create dictionaries, access and modify values, add and remove key-value pairs, and perform common operations on dictionaries. Dictionaries are commonly used to store data in a structured way, making them ideal for tasks such as representing real-world objects, mapping relationships, and managing configurations.</p>"},{"location":"python/09_data_structures/#looping-through-lists-tuples-and-dictionaries-in-python","title":"Looping through lists, tuples, and dictionaries in Python\u00b6","text":"<p>This notebook demonstrates how to loop through lists, tuples, and dictionaries in Python using <code>for</code> loops. For lists and tuples, the loop iterates through each element, while for dictionaries, it iterates through key-value pairs using the <code>items()</code> method</p>"},{"location":"python/10_modules_and_packages/","title":"10 modules and packages","text":"<pre># Creating a module\n\n# Save this code in a file named mymodule.py\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n# Using the module in another file\nimport mymodule\n\nprint(mymodule.greet(\"Alice\"))\n\n# Creating a package\n\n# Create a directory named 'mypackage'\n# Inside 'mypackage', create a file named 'mymodule.py'\n# Inside 'mypackage', create an empty file named '__init__.py' (this makes 'mypackage' a package)\n\n# Contents of mymodule.py\ndef greet(name):\n    return f\"Hello, {name} from mypackage!\"\n\n# Using the package in another file\nfrom mypackage import mymodule\n\nprint(mymodule.greet(\"Bob\"))\n\n# Importing sub-packages\nfrom mypackage import subpackage\n\nprint(subpackage.say_hello(\"Charlie\"))\n</pre> <p>In this example, <code>mymodule.py</code> is a module, and <code>mypackage</code> is a package that contains the <code>mymodule</code> module and a sub-package <code>subpackage</code> with its own module.</p>"},{"location":"python/10_modules_and_packages/#modules-and-packages-in-python","title":"Modules and Packages in Python\u00b6","text":""},{"location":"python/10_modules_and_packages/#modules","title":"Modules:\u00b6","text":"<ul> <li>Modules in Python are files that consist of Python code.</li> <li>They can define functions, classes, and variables that can be used in other Python files.</li> <li>Modules help in organizing code into logical units and can be reused across different projects.</li> <li>To use a module in Python, you need to import it using the import statement.</li> </ul>"},{"location":"python/10_modules_and_packages/#packages","title":"Packages:\u00b6","text":"<ul> <li>Packages in Python are directories that contain multiple modules.</li> <li>They are used to organize related modules into a single directory hierarchy.</li> <li>Packages can also contain sub-packages, which are packages within packages.</li> <li>To import a module from a package, you use dot notation (.) to specify the package and module name (e.g., import package.module).</li> </ul>"},{"location":"python/11_error_handling/","title":"11 error handling","text":"In\u00a0[1]: Copied! <pre># Handling a specific exception\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\n\n# Handling multiple exceptions\ntry:\n    x = int(\"abc\")\nexcept (ValueError, TypeError) as e:\n    print(\"Error:\", e)\n\n# Handling any exception\ntry:\n    x = int(\"abc\")\nexcept Exception as e:\n    print(\"Error:\", e)\n\n# Using else block\ntry:\n    x = 10 / 2\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\nelse:\n    print(\"No error occurred, result:\", x)\n\n# Using finally block\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError as e:\n    print(\"Error:\", e)\nfinally:\n    print(\"This will always execute\")\n</pre> # Handling a specific exception try:     x = 10 / 0 except ZeroDivisionError as e:     print(\"Error:\", e)  # Handling multiple exceptions try:     x = int(\"abc\") except (ValueError, TypeError) as e:     print(\"Error:\", e)  # Handling any exception try:     x = int(\"abc\") except Exception as e:     print(\"Error:\", e)  # Using else block try:     x = 10 / 2 except ZeroDivisionError as e:     print(\"Error:\", e) else:     print(\"No error occurred, result:\", x)  # Using finally block try:     x = 10 / 0 except ZeroDivisionError as e:     print(\"Error:\", e) finally:     print(\"This will always execute\") <pre>Error: division by zero\nError: invalid literal for int() with base 10: 'abc'\nError: invalid literal for int() with base 10: 'abc'\nNo error occurred, result: 5.0\nError: division by zero\nThis will always execute\n</pre> <p>In this example, we demonstrate various aspects of error handling in Python using try-except blocks. We handle specific exceptions, multiple exceptions, and any exception. We also show the usage of the else block to execute code when no exceptions occur and the finally block to execute code that should always run.</p>"},{"location":"python/11_error_handling/#error-handling-in-python","title":"Error Handling in Python\u00b6","text":"<ul> <li>Error handling in Python allows you to deal with exceptions that may occur during the execution of a program.</li> <li>Exceptions are events that occur during the execution of a program that disrupt the normal flow of the program's instructions.</li> <li>Python uses a try-except block to handle exceptions. The try block contains the code that may raise an exception, and the except block contains the code to handle the exception.</li> <li>You can also use the else block to run code that should only execute if no exceptions occur, and the finally block to run code that should always execute, regardless of whether an exception occurs or not.</li> </ul>"},{"location":"python/12_file_handling/","title":"12 file handling","text":"<pre># Creating a new file\nfile_path = 'data/example.txt'\nwith open(file_path, 'w') as file:\n    file.write('Hello, this is a test.')\n\n# Reading from a file\nwith open(file_path, 'r') as file:\n    content = file.read()\n    print(content)\n\n# Appending to a file\nwith open(file_path, 'a') as file:\n    file.write('\\nThis is a new line appended.')\n\n# Reading line by line\nwith open(file_path, 'r') as file:\n    for line in file:\n        print(line.strip())\n\n# Checking file existence\nimport os\nif os.path.exists(file_path):\n    print('File exists!')\nelse:\n    print('File does not exist!')\n\n# Deleting a file\nos.remove(file_path)\nprint('File deleted!')\n</pre>"},{"location":"python/12_file_handling/#introduction-to-file-handling-in-python","title":"Introduction to File Handling in Python\u00b6","text":"<p>File handling is an essential aspect of programming in Python, allowing you to work with files on your computer's file system. Python provides built-in functions and methods to perform various operations on files, such as reading, writing, appending, and deleting.</p> <p>In this tutorial, we will explore how to perform these operations using Python's file handling capabilities. We will learn how to create, open, read, write, append, and delete files, as well as check for file existence. Understanding file handling in Python is crucial for tasks that involve data storage, manipulation, and processing.</p>"},{"location":"python/13_oop/","title":"13 oop","text":"In\u00a0[1]: Copied! <pre>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def say_hello(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n</pre> class Person:     def __init__(self, name, age):         self.name = name         self.age = age      def say_hello(self):         return f\"Hello, my name is {self.name} and I am {self.age} years old.\" In\u00a0[2]: Copied! <pre>person1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n</pre> person1 = Person(\"Alice\", 30) person2 = Person(\"Bob\", 25) In\u00a0[3]: Copied! <pre>print(person1.name)\nprint(person2.age)\n</pre> print(person1.name) print(person2.age) <pre>Alice\n25\n</pre> In\u00a0[4]: Copied! <pre>print(person1.say_hello())\n</pre> print(person1.say_hello()) <pre>Hello, my name is Alice and I am 30 years old.\n</pre> In\u00a0[5]: Copied! <pre>class Car:\n    def __init__(self, make, model):\n        self.__make = make\n        self.__model = model\n\n    def get_make_model(self):\n        return f\"{self.__make} {self.__model}\"\n</pre> class Car:     def __init__(self, make, model):         self.__make = make         self.__model = model      def get_make_model(self):         return f\"{self.__make} {self.__model}\" In\u00a0[6]: Copied! <pre>class Student(Person):\n    def __init__(self, name, age, student_id):\n        super().__init__(name, age)\n        self.student_id = student_id\n\n    def get_student_info(self):\n        return f\"{self.name} (ID: {self.student_id})\"\n</pre> class Student(Person):     def __init__(self, name, age, student_id):         super().__init__(name, age)         self.student_id = student_id      def get_student_info(self):         return f\"{self.name} (ID: {self.student_id})\" In\u00a0[7]: Copied! <pre>def print_info(person):\n    print(person.say_hello())\n\nprint_info(person1)\nprint_info(Student(\"Charlie\", 22, \"12345\"))\n</pre> def print_info(person):     print(person.say_hello())  print_info(person1) print_info(Student(\"Charlie\", 22, \"12345\")) <pre>Hello, my name is Alice and I am 30 years old.\nHello, my name is Charlie and I am 22 years old.\n</pre>"},{"location":"python/13_oop/#introduction-to-object-oriented-programming-oop","title":"Introduction to Object-Oriented Programming (OOP)\u00b6","text":"<p>Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects,\" which can contain data in the form of attributes and code in the form of methods. OOP is centered around the following key concepts:</p> <ol> <li>Classes: Templates for creating objects, defining their structure and behavior.</li> <li>Objects: Instances of classes, representing concrete entities in a program.</li> <li>Encapsulation: Bundling data (attributes) and methods that operate on the data within a single unit (class).</li> <li>Inheritance: Mechanism where a new class can inherit attributes and methods from an existing class.</li> <li>Polymorphism: Ability to treat objects of different classes as instances of the same class.</li> </ol>"},{"location":"python/13_oop/#benefits-of-object-oriented-programming","title":"Benefits of Object-Oriented Programming\u00b6","text":"<ol> <li>Modularity: Organizing code into self-contained objects for easier understanding and maintenance.</li> <li>Reusability: Using existing classes to create new ones, saving time and effort.</li> <li>Encapsulation: Hiding the complexity of internal workings and exposing only necessary functionality.</li> <li>Flexibility and Scalability: Easily modifying and extending code as the project grows.</li> <li>Abstraction: Focusing on essential features while hiding unnecessary details, improving readability and maintainability.</li> </ol>"},{"location":"python/13_oop/#introduction-to-classes-and-objects-in-python","title":"Introduction to Classes and Objects in Python\u00b6","text":""},{"location":"python/13_oop/#table-of-contents","title":"Table of Contents:\u00b6","text":"<ol> <li>Classes</li> <li>Objects</li> <li>Attributes</li> <li>Methods</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Polymorphism</li> </ol>"},{"location":"python/13_oop/#1-classes","title":"1. Classes \u00b6","text":"<ul> <li>Classes in Python are blueprints for creating objects.</li> <li>They define the structure and behavior of objects.</li> <li>Classes can contain attributes (variables) and methods (functions).</li> </ul>"},{"location":"python/13_oop/#2-objects","title":"2. Objects \u00b6","text":"<ul> <li>Objects are instances of classes.</li> <li>They are created using the class constructor.</li> </ul>"},{"location":"python/13_oop/#3-attributes","title":"3. Attributes \u00b6","text":"<ul> <li>Attributes are variables associated with a class or object.</li> <li>They can be class attributes (shared among all instances) or instance attributes (unique to each instance).</li> </ul>"},{"location":"python/13_oop/#4-methods","title":"4. Methods \u00b6","text":"<ul> <li>Methods are functions defined within a class.</li> <li>They can operate on the attributes of a class.</li> </ul>"},{"location":"python/13_oop/#5-encapsulation","title":"5. Encapsulation \u00b6","text":"<ul> <li>Encapsulation is the concept of restricting access to certain parts of an object.</li> <li>In Python, you can use private attributes and methods by prefixing them with double underscores __.</li> </ul>"},{"location":"python/13_oop/#6-inheritance","title":"6. Inheritance \u00b6","text":"<ul> <li>Inheritance is the ability to create a new class based on an existing class.</li> <li>The new class (subclass) inherits attributes and methods from the existing class (superclass).</li> </ul>"},{"location":"python/13_oop/#7-polymorphism","title":"7. Polymorphism \u00b6","text":"<ul> <li>Polymorphism is the ability of different classes to be treated as instances of the same class.</li> <li>It allows objects of different classes to be used interchangeably.</li> </ul>"},{"location":"python/14_special_methods/","title":"14 special methods","text":"In\u00a0[1]: Copied! <pre>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"Alice\", 30)\nprint(person.name)\nprint(person.age)\n</pre> class Person:     def __init__(self, name, age):         self.name = name         self.age = age  person = Person(\"Alice\", 30) print(person.name) print(person.age) <pre>Alice\n30\n</pre> In\u00a0[2]: Copied! <pre>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"Person: {self.name}, Age: {self.age}\"\n\nperson = Person(\"Alice\", 30)\nprint(person)  # Calls __str__ method\n</pre> class Person:     def __init__(self, name, age):         self.name = name         self.age = age      def __str__(self):         return f\"Person: {self.name}, Age: {self.age}\"  person = Person(\"Alice\", 30) print(person)  # Calls __str__ method <pre>Person: Alice, Age: 30\n</pre> In\u00a0[3]: Copied! <pre>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"Person('{self.name}', {self.age})\"\n\nperson = Person(\"Alice\", 30)\nprint(repr(person))  # Calls __repr__ method\n</pre> class Person:     def __init__(self, name, age):         self.name = name         self.age = age      def __repr__(self):         return f\"Person('{self.name}', {self.age})\"  person = Person(\"Alice\", 30) print(repr(person))  # Calls __repr__ method <pre>Person('Alice', 30)\n</pre> In\u00a0[4]: Copied! <pre>class MyList:\n    def __init__(self, data):\n        self.data = data\n\n    def __len__(self):\n        return len(self.data)\n\nmy_list = MyList([1, 2, 3, 4, 5])\nprint(len(my_list))  # Calls __len__ method\n</pre> class MyList:     def __init__(self, data):         self.data = data      def __len__(self):         return len(self.data)  my_list = MyList([1, 2, 3, 4, 5]) print(len(my_list))  # Calls __len__ method <pre>5\n</pre> In\u00a0[5]: Copied! <pre>class MyList:\n    def __init__(self, data):\n        self.data = data\n\n    def __getitem__(self, index):\n        return self.data[index]\n\nmy_list = MyList([1, 2, 3, 4, 5])\nprint(my_list[2])  # Calls __getitem__ method\n</pre> class MyList:     def __init__(self, data):         self.data = data      def __getitem__(self, index):         return self.data[index]  my_list = MyList([1, 2, 3, 4, 5]) print(my_list[2])  # Calls __getitem__ method <pre>3\n</pre> In\u00a0[6]: Copied! <pre>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\np1 = Point(1, 2)\np2 = Point(3, 4)\np3 = p1 + p2  # Calls __add__ method\nprint(f\"({p3.x}, {p3.y})\")\n</pre> class Point:     def __init__(self, x, y):         self.x = x         self.y = y      def __add__(self, other):         return Point(self.x + other.x, self.y + other.y)  p1 = Point(1, 2) p2 = Point(3, 4) p3 = p1 + p2  # Calls __add__ method print(f\"({p3.x}, {p3.y})\") <pre>(4, 6)\n</pre> In\u00a0[7]: Copied! <pre>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\np1 = Point(1, 2)\np2 = Point(1, 2)\nprint(p1 == p2)  # Calls __eq__ method\n</pre>  class Point:     def __init__(self, x, y):         self.x = x         self.y = y      def __eq__(self, other):         return self.x == other.x and self.y == other.y  p1 = Point(1, 2) p2 = Point(1, 2) print(p1 == p2)  # Calls __eq__ method <pre>True\n</pre>"},{"location":"python/14_special_methods/#special-methods","title":"Special Methods\u00b6","text":"<p>Special methods, also known as magic or dunder (double underscore) methods, in Python are predefined methods that allow you to customize the behavior of objects. These methods are surrounded by double underscores (__) at the beginning and end of their names. They are called automatically by Python interpreter in specific situations</p>"},{"location":"python/14_special_methods/#1-__init__-initialization-method","title":"1. <code>__init__</code> - Initialization Method\u00b6","text":""},{"location":"python/14_special_methods/#2-__str__-string-representation-method","title":"2. <code>__str__</code> - String Representation Method\u00b6","text":""},{"location":"python/14_special_methods/#3-__repr__-official-string-representation-method","title":"3. <code>__repr__</code> - Official String Representation Method\u00b6","text":""},{"location":"python/14_special_methods/#4-__len__-length-method","title":"4. <code>__len__</code> - Length Method\u00b6","text":""},{"location":"python/14_special_methods/#5-__getitem__-item-access-method","title":"5. <code>__getitem__</code> - Item Access Method\u00b6","text":""},{"location":"python/14_special_methods/#6-__add__-addition-method","title":"6. <code>__add__</code> - Addition Method\u00b6","text":""},{"location":"python/14_special_methods/#7-__eq__-equality-method","title":"7. <code>__eq__</code> - Equality Method\u00b6","text":""}]}